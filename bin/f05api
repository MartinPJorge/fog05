#!/usr/bin/env python3
from flask import Flask, Response, request
from dstore import Store
import logging
import json
import random
import time
from fog05 import WebAPI



app = Flask(__name__)
logger = logging.Logger('fog05 rest api')

@app.route('/')
def index():
    return json.dumps({'fog05 REST API': {'version': 0.1}})


@app.route('/node/list', methods=['GET'])
def get():
    uri = request.form.get('uri')
    v = None

    print('GET -> {}'.format(uri))

    if '*' in uri:
        if uri.startswith('a'):
            v = store.actual.resolveAll(uri)
        elif uri.startswith('d'):
            v = store.desired.resolveAll(uri)
    else:
        if uri.startswith('a'):
            v = store.actual.resolve(uri)
        elif uri.startswith('d'):
            v = store.desired.resolve(uri)

    print('GET -> {}'.format(v))
    if v is None:
        return ''
    if len(v) == 0:
        return ''
    return json.dumps(v)



@app.route('/put/', methods=['PUT'])
def put():
    uri = request.form.get('uri')
    value = request.form.get('value')
    print('PUT -> {} -> {}'.format(uri, value))

    if uri.startswith('a'):
        return json.dumps({'res': store.actual.put(uri, value)})
    elif uri.startswith('d'):
        return json.dumps({'res': store.desired.put(uri, value)})


#@app.route('/<path:uri>', defaults={'value': None} ,methods=['PATCH'])
@app.route('/dput/', methods=['PATCH'])
def dput():
    uri = request.form.get('uri')
    value = request.form.get('value')
    print('DPUT -> {} -> {}'.format(uri, value))
    if uri.startswith('a'):
        return json.dumps({'res': store.actual.dput(uri, value)})
    elif uri.startswith('d'):
        return json.dumps({'res': store.desired.dput(uri, value)})

@app.route('/remove/', methods=['DELETE'])
def remove():
    uri = request.form.get('uri')
    print('REMOVE -> {}'.format(uri))
    if uri.startswith('a'):
        store.actual.remove(uri)
        return json.dumps({'res': True})
    elif uri.startswith('d'):
        store.desired.remove(uri)
        return json.dumps({'res': True})


if __name__ == '__main__':

    sid = 0

    home = "f05rest"

    aroot = 'afos://{}'.format(sid)
    droot = 'dfos://{}'.format(sid)

    store = FOSStore(aroot, droot, home)
    try:
        app.run(host="0.0.0.0", debug=True, port=5000,use_reloader=False)
    finally:
        store.close()