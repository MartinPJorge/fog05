import sys
from jsonschema import validate
from fog05.DStore import *

class Fos(object):
    def __init__(self):
        self.uuid = str(uuid.uuid4())

    def __initialize(self):
        self.droot = "dfos://<sys-id>"
        self.dhome = str("dfos://<sys-id>/%s" % self.uuid)
        self.dstore = DStore(self.uuid, self.droot, self.dhome, 1024)

        self.aroot = "afos://<sys-id>"
        self.ahome = str("afos://<sys-id>/%s" % self.uuid)
        self.astore = DStore(self.uuid, self.aroot, self.ahome, 1024)

        self.nodes = {}

        #uri = str('afos://<sys-id>/*/')
        #self.astore.observe(uri, self.nodeDiscovered)

    def nodeDiscovered(self, uri, value, v=None):
        #value = json.loads(value)
        if uri != str('fos://<sys-id>/%s/' % self.uuid):
            print("New Node Discovered: %s" % value.get('uuid'))
            self.nodes.update({len(self.nodes) + 1: {value.get('uuid'): value}})

    def print_nodes(self):
        uri = str('afos://<sys-id>/*/')
        nodes = json.loads(self.astore.get(uri))
        print(nodes)

    def __entry_point(self, action):
        r = {
            'node': self.__node_command,
            'network': self.__network_command,
            'entity': self.__entity_command,
            'application': self.__application_command
        }

        return r.get(action, None)

    def __node_plugins_list(self,node_uuid):
        uri = str('afos://<sys-id>/%s/plugins' % node_uuid)
        plugins = self.astore.get(uri)
        if plugins is not None:
            plugins = json.loads(plugins[0]).get('plugins')
            print('+-----------------------PLUGINS-------------------------+')
            for p in plugins:
                print('+-------------------------------------------------------+')
                print("| Name %s" % p.get('name'))
                print("| UUID %s" % p.get('uuid'))
                print("| Type %s" % p.get('type'))
            print('+-------------------------------------------------------+')
        else:
            print("No node or plugins found")

    def __send_add_plugin(self,node_uuid, name, type):
        val = {'plugins': [{'name': name, 'version': 1, 'uuid': '',
                            'type': type, 'status': 'add'}]}
        uri = str('dfos://<sys-id>/%s/plugins' % node_uuid)
        print(uri)
        # print(self.dstore.get(uri))

        r = self.dstore.dput(uri, json.dumps(val)) ### destination says:
        # >> Received old version of dfos://<sys-id>/e2b94d56-f4e1-99fa-886e-c1e3124496f9/plugins
        if r is None:
            print("Resolved failed")
        elif r:
            print("Plugin added")

    def __node_command(self, parameters):
        # TODO return None even if there are nodes in the system
        if len(parameters) < 2:
            print("Should specify node UUID or list")
            return
        if len(parameters) > 3:
            if parameters[2] == 'plugins':
                if parameters[3] == 'list':
                    self.__node_plugins_list(parameters[1])
                    return
                elif parameters[3] == 'add':
                    # should specify name and type (or maybe uuid and then the command will resolve
                    if len(parameters) == 6:
                        plugin_name = parameters[4]
                        plugin_type = parameters[5]
                        if plugin_type in ['network', 'runtime']:
                            self.__send_add_plugin(parameters[1],plugin_name,plugin_type)
                            return
                        else:
                            print("Type %s not supported" % plugin_type)
                            return
                    else:
                        print("Should specify plugin name and type [network|runtime]")
                        return



        if parameters[1] == 'list':
            uri = str('afos://<sys-id>/*/')
            print(uri)
            nodes = self.astore.get(uri)[0] ## se below for information on this
            ## this not work
            print(nodes)
        else:
            uri = str('afos://<sys-id>/%s/' % parameters[1]) ## this is because the resolver return a tuple with
            # value and version
            print("Uri: %s" % uri)
            node = self.astore.get(uri)
            if node is not None:
                node = json.loads(node[0])
                '''
                 for k in node:
                    v = node.get(k)
                    if isinstance(v, str):
                        print("| {:<8}  {:<10}  {:<0}".format(k, v, '|'))
                    elif isinstance(v, list):
                        for v2 in v:
                            if isinstance(v2, str):
                                print("| {:<8}  {:<10}  {:<0}".format(k, v2, '|'))
                            elif isinstance(v2,dict):
                                for k3 in v2:
                                    v3 = v2.get(k3)
                                    if isinstance(v3, str):
                                        print("| {:<8}  {:<10}  {:<0}".format(k3, v3, '|'))
                
                '''
                print('+-------------------------------------------------------+')
                print('| UUID : %s \t\t|' % node.get('uuid'))
                print('| Name: %s \t\t|' % node.get('name'))
                print('+-------------------------------------------------------+')
                '''
                uri = uri+'plugins'
                print(uri)
                p = self.astore.get(uri)
                if p is not None:
                    print('+-----------------------PLUGINS-------------------------+')
                    p = json.loads(p[0])
                    p = p.get('plugins')
                    for plug in p:
                        print('+-------------------------------------------------------+')
                        print("| Name %s" % plug.get('name'))
                        print("| UUID %s" % plug.get('uuid'))
                    print('+-------------------------------------------------------+')
                else:
                    print("No plugin found on this node")
                '''
            else:
                print("Node not found!!")

    def __network_command(self, parameters):
        '''
        Should validate parameters with proper json schema and then if everything is fine should execute the command
        ...
        try:
            validate({manifest, schema)
        except ValidationError as e:
            print("There is an error in the manifest file %s" % e.strerror)
            return
        ...


        :param parameters:
        :return:
        '''
        print(parameters)

    def __entity_command(self, parameters):
        print(parameters)

    def __application_command(self, parameters):
        print(parameters)

    def main(self, argv):


        '''
        
        This is the entry point of the fog05 cli interface
        with this you can onboard application/entities, get information about current nodes in the system
        create virtual networks, and interact with entities
        
        @GB I think at least system id should be always specified or can be read from a simple conf.ini file
        
        eg.

        ---------
        fos node list
            list of nodes in current system

        fos node <node_uuid>
            get information about a specific node

        ---------
        fos network list 
            list of networks in current system
        
        fos network add <path to network json manifest>
            create a new network in the system

        fos network remove <uuid>
            remove the specified network
        ---------
        
        ---------
        fos entity list
            list of entity in current system
        
        fos entity add <path to entity json manifest>
            create a new entity in the system
 
        fos entity remove <uuid>
            remove the specified entity from the system
        
        fos entity migrate <uuid> <destination_uuid>
            migrate the entity to the destination uuid specified node
        --------
        
        --------
        fos application list
            list of applications in current system
        
        fos application add <path to application json manifest>
            add an application in the current system
        
        fos application remove <uuid>
            remove the specified application from the system
        
        -------
        
        '''

        action = self.__entry_point(argv[1])
        if action is None:
            print("Error parameter %s not recognized" % argv[1])
        else:
            self.__initialize()
            time.sleep(5)
            action(argv[1:])


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("provide parameters")
    else:
        c = Fos()
        c.main(sys.argv)
